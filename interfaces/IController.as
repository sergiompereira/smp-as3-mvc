////////////////////////////////////////////////////////////////////////////////////// AS3-SimpleMVC - Copyright (c) 2008 Tony Birleffi//// Permission is hereby granted, free of charge, to any person// obtaining a copy of this software and associated documentation// files (the "Software"), to deal in the Software without// restriction, including without limitation the rights to use,// copy, modify, merge, publish, distribute, sublicense, and/or sell// copies of the Software, and to permit persons to whom the// Software is furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be// included in all copies or substantial portions of the Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR// OTHER DEALINGS IN THE SOFTWARE.////////////////////////////////////////////////////////////////////////////////////package srg.mvc.interfaces {		import srg.mvc.interfaces.IModel;	import srg.mvc.core.CustomEvent;			/**	 * This is the interface class for the Controller.	 * Handles user inputs	 * 	 * @see org.simplemvc.core.Controller;	 * 	 * @author Tony Birleffi	 */	public interface IController 	{				function init(model:IModel, view:IView = null):void;		function set model( model:IModel ):void;		function get model():IModel;		function set view( view:IView ):void;		function get view():IView;				//Each controller should declare its own specific public methods in response to user input in specific views		//These methods bellow, registered on the registerEvents function, are just immediate, though not robbust, solutions				//Handling of all possible user input events		function mouseOverHandler(event:CustomEvent):void;		function mouseOutHandler(event:CustomEvent):void;		function mouseDownHandler(event:CustomEvent):void;		function mouseUpHandler(event:CustomEvent):void;		function mouseMoveHandler(event:CustomEvent):void;		function mouseWheelHandler(event:CustomEvent):void;				function keyboardUpHandler(event:CustomEvent):void;					}}