////////////////////////////////////////////////////////////////////////////////////// AS3-SimpleMVC - Copyright (c) 2008 Tony Birleffi//// Permission is hereby granted, free of charge, to any person// obtaining a copy of this software and associated documentation// files (the "Software"), to deal in the Software without// restriction, including without limitation the rights to use,// copy, modify, merge, publish, distribute, sublicense, and/or sell// copies of the Software, and to permit persons to whom the// Software is furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be// included in all copies or substantial portions of the Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR// OTHER DEALINGS IN THE SOFTWARE.////////////////////////////////////////////////////////////////////////////////////package com.smp.mvc.core {	import com.smp.mvc.interfaces.IPreloader;	import com.smp.mvc.core.Application;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.utils.getDefinitionByName;	/**	 * The Preloader for the Application class best practice 	 * is to extend this class for your own preloader class	 * and then add the frame command to your own application 	 * class which is extended from org.simplemvc.core.Application.	 * 	 * @example	 * <listing>	 * [Frame(factoryClass="com.yourapp.Preloader")]	 * </listing>	 * 	 * @see flash.display.MovieClip;	 * @author Tony Birleffi	 */	 public class Preloader extends MovieClip implements IPreloader	 {		/** Define the flash vars. */		public var fvars:Object = null;				/** Define the application class. */		private var application:Class = srg.mvc.core.Application;				/**		 * Constructor.		 * 		 * @param classPath		[Optional] String;		 */		public function Preloader( classPath:Class = null )		{			stop();			if( classPath != null ) appClass = classPath;			setupStage();			addEventListener( Event.ENTER_FRAME, onEnterFrame );		}			/**		 * Setup the stage, you can override this class for your own needs.		 */		public function setupStage():void		{			stage.scaleMode = StageScaleMode.NO_SCALE;		    stage.align = StageAlign.TOP;		}				/**		 * Method used to display the loading progress, usually overrided.		 * 		 * @param percent	Number.		 */		public function showPreloader( percent:Number ):void		{			// Abstract, handle preloading graphics here.		}				/**		 * Method used to remove the loading progress, usually overrided.		 */		public function hidePreloader():void		{			// Abstract, removing of the preloading graphics here.		}				/**		 * Initializes the application.		 */		protected function init():void		{			var app:Object = new appClass();			addChild( app as DisplayObject );		    		}				/**		 * Event handler for the onEnterFrame.		 * 		 * @param event		Event.		 */		private function onEnterFrame( event:Event ):void		{			var percent:Number = Math.round(root.loaderInfo.bytesLoaded / root.loaderInfo.bytesTotal);						if (percent == 1)			{				removeEventListener( Event.ENTER_FRAME, onEnterFrame );				//nextFrame();				init();				hidePreloader();			}			else			{				showPreloader( percent );			}		}				/**		 * Gets the flash vars.		 * 		 * @return Object.		 */		public function get flashVars():Object		{			return fvars;		}				/**		 * Sets the flash vars.		 * 		 * @param obj		flash vars object.		 */		public function set flashVars( obj:Object ):void		{		 	fvars = obj;		}				/**		 * Gets the application class path.		 * 		 * @return String.		 */		public function get appClass():Class		{			return application;		}				/**		 * Sets the application class path.		 * 		 * @param path		String.		 */		public function set appClass( path:Class ):void		{		 	application = path;		}	}}